parameters:
  # lvVersionsToBuild: list of {version, bitness}
  - name: lvVersionsToBuild
    type: object
  # releaseInfo: one of {releaseVersion, quarterlyReleaseVersion}
  - name: releaseInfo
    type: object
  # buildSteps: list of {projectLocation, buildOperation, target, buildSpec}
  - name: buildSteps
    type: object
  # dependencies (optional): list of {source, file, destination}
  - name: dependencies
    type: object
    default:
      - file: ''
  # packages: list of {controlFileName, payloadMaps: list of {payloadLocation, installLocation} }
  - name: packages
    type: object
  # strings (buildOutputLocation, archiveLocation)
  - name: buildOutputLocation
    type: string
  - name: archiveLocation
    type: string
  # pack (optional)
  - name: pack
    type: boolean
    default: false

# Note: If custom build steps are needed for a particular custom device, copy this entire template into the azure-pipeline and add steps before/after as needed
stages:
  - stage: build
    jobs:
      - ${{ each lvVersionToBuild in parameters.lvVersionsToBuild }}:
        - job: Job${{ lvVersionToBuild.version }}_${{ lvVersionToBuild.bitness }}
          displayName: Build for LabVIEW ${{ lvVersionToBuild.version }}
          steps:
            - template: azure-templates\pre-job-steps.yml@imitation-cd # Configure variables, check out repos, Clear cache
              parameters:
                lvVersionToBuild:    ${{ lvVersionToBuild }}
                releaseInfo:         ${{ parameters.releaseInfo }}
                archiveLocation:     ${{ parameters.archiveLocation }}
                buildOutputLocation: ${{ parameters.buildOutputLocation }}

            - ${{ each buildStep in parameters.buildSteps }}:
              - template: azure-templates\build-op-steps.yml@imitation-cd # config file and build specs
                parameters:
                  buildStep:    ${{ buildStep }}
                  dependencies: ${{ parameters.dependencies }}

            - template: azure-templates\post-job-steps.yml@imitation-cd # nipkg and archive
              parameters:
                packages: ${{ parameters.packages }}
                pack:     ${{ parameters.pack }}
        # if all jobs have passed, place .finished file in top level archive location
      - job: Finalize
        displayName: Final Check for Passing Builds
        dependsOn:
          - ${{ each lvVersionToBuild in parameters.lvVersionsToBuild }}:
            - Job${{ lvVersionToBuild.version }}_${{ lvVersionToBuild.bitness }}
        condition: succeeded()
        steps:
        - powershell: |
            New-Item `
              -Path "$(fullArchiveLocation)" `
              -Name ".finished" `
              -ItemType "File"