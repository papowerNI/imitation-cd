parameters:
  - name: customDeviceRepoName
    type: string
  - name: lvVersion
    type: string
  - name: bitness
    type: string
  - name: buildTools
    type: string
    default: niveristand-custom-device-build-tools
  - name: archiveLocation
    type: string
  - name: alwaysRun
    type: boolean
    default: true

steps:
###########  Configure Job-wide Variables  ###########
  # --- lvPath, architecture ---
  - ${{ if eq( parameters.bitness, '32-bit' )}}:
    - powershell: |
        Write-Host "##vso[task.setvariable variable=lvPath]C:\Program Files (x86)\National Instruments\LabVIEW ${{ parameters.lvVersion }}"
        Write-Host "##vso[task.setvariable variable=architecture]x86"
      displayName: Use 32-bit LabVIEW

  - ${{ if eq( parameters.bitness, '64-bit' )}}:
    - powershell: |
        Write-Host "##vso[task.setvariable variable=lvPath]C:\Program Files\National Instruments\LabVIEW ${{ parameters.lvVersion }}"
        Write-Host "##vso[task.setvariable variable=architecture]x64"
      displayName: Use 64-bit LabVIEW

  # --- lvConfigVersion (.NET Assembly Version) ---
  - ${{ if eq( parameters.lvVersion, '2020' )}}:
    - powershell: |
        Write-Host "##vso[task.setvariable variable=lvConfigVersion]8.0.0.0"
        Write-Host '##vso[task.setvariable variable=shortLvVersion]20'
        Write-Host '##vso[task.setvariable variable=releaseVersion]20.0.0'
        Write-Host '##vso[task.setvariable variable=quarterlyReleaseVersion]$(releaseVersion)'
      displayName: Use .NET Assembly 8.0.0.0

  - ${{ if eq( parameters.lvVersion, '2021' )}}:
    - powershell: |
        Write-Host "##vso[task.setvariable variable=lvConfigVersion]9.0.0.0"
        Write-Host '##vso[task.setvariable variable=shortLvVersion]21'
        Write-Host '##vso[task.setvariable variable=releaseVersion]21.0.0'
        Write-Host '##vso[task.setvariable variable=quarterlyReleaseVersion]$(releaseVersion)'
      displayName: Use .NET Assembly 9.0.0.0

  - ${{ if eq( parameters.lvVersion, '2023' )}}:
    - powershell: |
        Write-Host "##vso[task.setvariable variable=lvConfigVersion]10.0.0.0"
        Write-Host '##vso[task.setvariable variable=shortLvVersion]23'
        Write-Host '##vso[task.setvariable variable=releaseVersion]23.0.0'
        Write-Host '##vso[task.setvariable variable=quarterlyReleaseVersion]2023 Q1'
      displayName: Use .NET Assembly 10.0.0.0

  # --- buildTools, lvVersion, lvCLICall ---
  - powershell: |
      Write-Host '##vso[task.setvariable variable=buildTools]${{ parameters.buildTools }}'
      Write-Host '##vso[task.setvariable variable=lvVersion]${{ parameters.lvVersion }}'
      Write-Host '##vso[task.setvariable variable=customDeviceRepoName]${{ parameters.customDeviceRepoName }}'
      Write-Host '##vso[task.setvariable variable=archiveLocation]${{ parameters.archiveLocation }}'
      Write-Host '##vso[task.setvariable variable=lvCLICall]LabVIEWCLI -PortNumber 3363 -LabVIEWPath "$(lvPath)\LabVIEW.exe" -AdditionalOperationDirectory "%cd%\${{ parameters.buildTools }}\lv\operations"'
      Write-Host '##vso[task.setvariable variable=archiveLocation]${{ parameters.archiveLocation }}'
      Write-Host "##vso[task.setvariable variable=runBuild]True"
    displayName: Define Job-wide Variables

###########  Decide whether to Skip this Build  ###########
  - ${{ if eq( parameters.alwaysRun, false )}}:
    # Run by default, unless a commit is found that matches the current commit
    - powershell: | 
        $skipBuild = $false
        Get-ChildItem -Path '$(archiveLocation)\*\$(lvVersion)\*' -Recurse -Include '*commit-id' -Verbose | ForEach-Object { `
          If ( (((Get-Content -Path $_) -eq '$(Build.SourceVersion)')) -or $skipBuild ) { `
            $skipBuild = $true `
          } `
        } 
        If ($skipBuild) { Write-Host "##vso[task.setvariable variable=runBuild]False" }
      displayName: alwaysRun = False, so check for existing build (if found, skip remaining steps)

  - powershell: Write-Output $(runBuild)
    displayName: TEMP - display the runBuild variable to confirm its state
###########  Checkout Necessary Repos  ###########
  - checkout: self
    displayName: Check out ${{ parameters.customDeviceRepoName }} repository
    condition: and(succeeded(), eq(variables['runBuild'], 'True'))

  - checkout: ${{ parameters.buildTools }}
    displayName: Check out NI VS Custom Device Build Tools repository
    condition: and(succeeded(), eq(variables['runBuild'], 'True'))

###########  Clear Compile Cache  ###########
  - script: $(lvCLICall) -OperationName "SecureRunVI" -VIPath "%cd%\$(buildTools)\lv\operations\Utilities\ClearCache.vi" -LogFilePath "%cd%\$(customDeviceRepoName)\lvClearCache.log"
    displayName: Clear compiled cache for LabVIEW ${{ parameters.lvVersion }}
    condition: and(succeeded(), eq(variables['runBuild'], 'True'))